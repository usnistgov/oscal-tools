<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OSCAL Tools</title><link>https://pages.nist.gov/oscal-tools/</link><description>Recent content on OSCAL Tools</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://pages.nist.gov/oscal-tools/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://pages.nist.gov/oscal-tools/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pages.nist.gov/oscal-tools/readme/</guid><description>OSCAL Examples All OSCAL content examples have been moved to the OSCAL content GitHub repository.</description></item><item><title>CSX Applications</title><link>https://pages.nist.gov/oscal-tools/projects/csx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pages.nist.gov/oscal-tools/projects/csx/</guid><description>Client-side XSLT is an architecture in which application logic is distributed to web clients (browsers) to apply to data under local control, without exposure. This project focused on applications built using the SaxonJS implementation of XSLT 3.0, which functions in late-model web browsers (writing in 2021). Source code in XSLT is compiled into a JSON transformation 'plan', which can be downloaded with a page and applied by SaxonJS on the user's machine.</description></item><item><title>OSCAL Catalog JSON-to-XML Converter</title><link>https://pages.nist.gov/oscal-tools/demos/csx/format-converter/fromjson/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pages.nist.gov/oscal-tools/demos/csx/format-converter/fromjson/</guid><description>function makeXMLforJSON(jsontext) { SaxonJS.transform({ stylesheetLocation: "oscal-catalog_JSONtoXML_converter.sef.json", initialTemplate: "make-xml", stylesheetParams: { "oscal-data": jsontext } },"async") } function dropFileText(fileSet,whereID) { for (const eachFile of fileSet) { let where = document.getElementById(whereID) let frdr = new FileReader(); frdr.onload = function () { where.value = frdr.result; makeXMLforJSON(frdr.result) } frdr.readAsText(eachFile); } } /* reads result off of pane, provides it to a download link and clicks it */ function offerDownload(fileName) { var contents = document.</description></item><item><title>OSCAL Catalog XML-to-JSON Converter</title><link>https://pages.nist.gov/oscal-tools/demos/csx/format-converter/fromxml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pages.nist.gov/oscal-tools/demos/csx/format-converter/fromxml/</guid><description>function makeJSONforXML(xmltext) { SaxonJS.transform({ stylesheetLocation: "oscal-catalog_XMLtoJSON_converter.sef.json", initialTemplate: "make-json", stylesheetParams: { "oscal-data": xmltext } },"async") } function dropFileText(fileSet,whereID) { for (const eachFile of fileSet) { let where = document.getElementById(whereID) let frdr = new FileReader(); frdr.onload = function () { where.value = frdr.result; makeJSONforXML(frdr.result) } frdr.readAsText(eachFile); } } /* reads result off of pane, provides it to a download link and clicks it */ function offerDownload(fileName) { var contents = document.</description></item><item><title>OSCAL Deep Diff</title><link>https://pages.nist.gov/oscal-tools/projects/oscal-deep-diff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pages.nist.gov/oscal-tools/projects/oscal-deep-diff/</guid><description>OSCAL Deep Diff is an open-source command line application and library that can produce schema-agnostic comparisons of OSCAL JSON artifacts.
OSCAL Deep Diff was built with the following considerations:
Document comparisons can vary wildly in intention and desired output, so reliance on an input schema is undesirable. The same tool should be able to compare any OSCAL JSON artifacts based on a customized set of comparisons. The comparison must be configurable in order to constrain the output document to meet the user's needs.</description></item><item><title>XSLT Stylesheets</title><link>https://pages.nist.gov/oscal-tools/projects/xslt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pages.nist.gov/oscal-tools/projects/xslt/</guid><description>XSLT is the Extensible Stylesheet Language, defined by the World-Wide Web Consortium and now in version 3.0.
Applications offered from this repository include:
Rendering OSCAL catalogs in HTML and PDF These include both generic (any OSCAL) and &amp;quot;NIST emulation&amp;quot; (tuned to SP800-53-series) stylesheets Tested in open source tools Suitable for adaptation and extension &amp;quot;Refreshing&amp;quot; and generating &amp;quot;fresh&amp;quot; OSCAL documents (updating timestamps and/or UUIDs) Miscellaneous utilities See the directory in the repository for current details.</description></item></channel></rss>